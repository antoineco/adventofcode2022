package day10_test

import (
	"testing"

	"adventofcode2022/day10"
	"adventofcode2022/fs"
)

func TestPuzzle1(t *testing.T) {
	testCases := []struct {
		desc   string
		input  []byte
		expect int
	}{
		{
			desc: "Provided example 1",
			input: []byte{
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '5', '\n',
			},
			expect: 20*-1 + 60*-1 + 100*-1 + 140*-1 + 180*-1 + 220*-1,
		},
		{
			desc: "Provided example 2",
			input: []byte{
				'a', 'd', 'd', 'x', ' ', '1', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '4', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '4', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '5', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '6', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '6', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '3', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '8', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '0', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '9', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '2', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '0', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '0', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
			},
			expect: 13140,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			fs := fs.NewMemFS()
			if err := fs.CreateFile("input", tc.input); err != nil {
				t.Fatal("Error creating in-memory test file:", err)
			}

			out := day10.Puzzle1(fs, "input")

			if out != tc.expect {
				t.Errorf("Expected %d, got %d", tc.expect, out)
			}
		})
	}
}

func TestPuzzle2(t *testing.T) {
	testCases := []struct {
		desc   string
		input  []byte
		expect string
	}{
		{
			desc: "Provided example",
			input: []byte{
				'a', 'd', 'd', 'x', ' ', '1', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '4', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '4', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '5', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '5', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '6', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '6', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '7', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '3', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '8', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '0', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '9', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '8', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '9', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '3', '7', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '3', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '5', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '2', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '0', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '0', '\n',
				'a', 'd', 'd', 'x', ' ', '1', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '2', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '6', '\n',
				'a', 'd', 'd', 'x', ' ', '-', '1', '1', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
				'n', 'o', 'o', 'p', '\n',
			},
			expect: `` +
				"##..##..##..##..##..##..##..##..##..##..\n" +
				"###...###...###...###...###...###...###.\n" +
				"####....####....####....####....####....\n" +
				"#####.....#####.....#####.....#####.....\n" +
				"######......######......######......####\n" +
				"#######.......#######.......#######.....",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			fs := fs.NewMemFS()
			if err := fs.CreateFile("input", tc.input); err != nil {
				t.Fatal("Error creating in-memory test file:", err)
			}

			out := day10.Puzzle2(fs, "input")

			if out != tc.expect {
				t.Errorf("Expected\n%s\ngot\n%s", tc.expect, out)
			}
		})
	}
}
